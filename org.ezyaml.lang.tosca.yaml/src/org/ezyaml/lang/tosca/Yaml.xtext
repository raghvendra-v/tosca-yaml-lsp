grammar org.ezyaml.lang.tosca.Yaml with org.eclipse.xtext.xbase.Xbase hidden(EOL, SL_COMMENT, HIDDEN, FOLDED_EOL)

generate yaml "http://www.ezyaml.org/lang/tosca/Yaml"
import "http://www.eclipse.org/xtext/common/JavaVMTypes"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

YamlDocument:
	("---"? (content+=YamlStructure))*; /** TODO: enable multi-documents later*/
YamlStructure:
	ToscaCatalogueVersion | ToscaImportStatement | ToscaTypesDeclaration | YamlMappingExpr;

/******************** START : TOSCA specific grammar elements**********************/
/*
 * As per http://docs.oasis-open.org/tosca/TOSCA-Simple-Profile-YAML/v1.2/csd01/TOSCA-Simple-Profile-YAML-v1.2-csd01.html
 */
ToscaCatalogueVersion:
	MARGIN? "tosca_definitions_version" ":" START_OF_RHS START_OF_STR version=STR END_OF_STR
	END_OF_RHS;

/*
 * TOSCA-Simple-Profile-YAML-v1.2-csd01.html
 * 3.5.8.2 Grammar
 */
ToscaImportStatement:
	MARGIN? "imports" ":" START_OF_RHS 
	ToscaFirstImport next+=ToscaNextImports* END_OF_SEQ END_OF_RHS
;

ToscaFirstImport:
	(INDENT START_OF_SEQ "-" ((START_OF_STR importURI=STR END_OF_STR) | (multiLineImports=ToscaMultiLineImport) | ( keyedMultiLineImports=ToscaMultiLineImportwithKey) ))
;
ToscaNextImports:
	(MARGIN START_OF_SEQ_ENTRY "-" ((START_OF_STR importURI=STR END_OF_STR) | 	(multiLineImports=ToscaMultiLineImport) | ( keyedMultiLineImports=ToscaMultiLineImportwithKey) ))
;

ToscaMultiLineImport:
	 INDENT "file" ":" START_OF_RHS START_OF_STR importURI=STR END_OF_STR END_OF_RHS
	(MARGIN "repository" ":" START_OF_RHS START_OF_STR repository=STR END_OF_STR END_OF_RHS)? &
	(MARGIN "namespace_uri" ":" START_OF_RHS START_OF_STR namespace_uri=STR END_OF_STR END_OF_RHS)? &
	(MARGIN "namespace_prefix" ":" START_OF_RHS START_OF_STR namespace_prefix=STR END_OF_STR END_OF_RHS)?;

ToscaMultiLineImportwithKey:
	MARGIN importsKey=KEY_STR ":" START_OF_RHS  ((  ToscaMultiLineImport ) | ( START_OF_STR singleLineImports+=STR END_OF_STR ) )END_OF_RHS
;
ToscaTypesDeclaration returns YamlMappingExpr:
	(MARGIN | INDENT)? key=("data_types" | "capability_types" | "relationship_types" | "node_types") ":" START_OF_RHS
	(INDENT? value+=ToscaTypesBlock)* END_OF_RHS;

ToscaTypesBlock returns YamlRHS:
	(INDENT entries+=ToscaType) (MARGIN entries+=ToscaType)*;

ToscaType :
	name=KEY_STR ":" START_OF_RHS ((INDENT entries+=ToscaTypeAttributes) (MARGIN entries+=ToscaTypeAttributes)*)*
	END_OF_RHS;

ToscaTypeAttributes:
	ToscaSuperTypeDeclaration | ToscaTypeMembers | ToscaValidTargetTypes | YamlMappingEntry;

ToscaSuperTypeDeclaration:
	"derived_from" ":" START_OF_RHS START_OF_STR superType=[ToscaType|STR] END_OF_STR
	END_OF_RHS;

ToscaTypeMembers:
	"properties" ":" START_OF_RHS (INDENT entries+=YamlMappingEntry) (MARGIN entries+=YamlMappingEntry)* END_OF_RHS;

ToscaValidTargetTypes:
	"valid_target_types" ":" START_OF_RHS YamlRHS END_OF_RHS;

	/******************** END : TOSCA specific grammar elements*************************
 * 
 * 
 */
YamlMappingExpr:
	(MARGIN | INDENT)? key=KEY_STR ":" START_OF_RHS ((INDENT? value+=YamlRHS) | (INDENT START_OF_SEQ
	value+=YamlSequenceExpr))* END_OF_RHS;

YamlMappingEntry:
	key=KEY_STR ":" START_OF_RHS ((INDENT? value+=YamlRHS) | ((INDENT | MARGIN)? START_OF_SEQ value+=YamlSequenceExpr))*
	END_OF_RHS;

YamlMap returns YamlRHS:
	(MARGIN entries+=YamlMappingEntry)+;

YamlSubNode returns YamlRHS:
	(INDENT entries+=YamlMappingEntry) (MARGIN entries+=YamlMappingEntry)*;

YamlSequenceExpr:
	("-" entries+=(YamlRHS | YamlMap)) (MARGIN START_OF_SEQ_ENTRY "-" entries+=(YamlRHS | YamlMap))* END_OF_SEQ;

YamlRHS:
	("[" Array) | ("{" Map) | Scalar | YamlSubNode;

Array:
	{Array} ((entries+=YamlRHS) ("," entries+=YamlRHS)*)? "]";

Map:
	{Map} ((entries+=MapEntry) ("," entries+=MapEntry)*)? "}";

MapEntry returns StringToTypedValueMapEntry:
	key=KEY_STR ":" value=YamlRHS;

Scalar:
	numValue=DECIMAL | boolValue=BOOLEAN | stringValue=MultiLineString | isNull?=NULL;

MultiLineString returns ecore::EString:
	(START_OF_STR ((INDENT | MARGIN | DEDENT)? STR)+ END_OF_STR) | (STR);

terminal FOLDED_EOL:
	'\t captures a newline but should be translated as SPACE\t';

terminal START_OF_STR:
	'\t to indicate start of an unquoted string\t';

terminal START_OF_SEQ:
	'\t to indicate start of a sequence\t';

terminal START_OF_RHS:
	'\t to indicate start of an complex value\t';

terminal END_OF_STR:
	'\t to indicate end of an unquoted string\t';

terminal START_OF_SEQ_ENTRY:
	'synthetic hidden tokens';

terminal END_OF_SEQ:
	'\t to indicate end of a sequence\t';

terminal END_OF_RHS:
	'\t to indicate end of an complex value\t';

terminal NULL:
	'\tNULL VALUE\t';

terminal INDENT:
	'\tindent with margin increased from previous\t';

terminal MARGIN:
	'\tindent with margin same as previous\t';

terminal DEDENT:
	'\tindent with margin decreased from previous\t';

terminal STR returns ecore::EString:
	'\tan unquoted string\t';

terminal KEY_STR returns ecore::EString:
	'\tan unquoted key string\t';

terminal DECIMAL:
	'positive integer value';

terminal BOOLEAN:
	'\tboolean value\t';

terminal SL_COMMENT:
	'#' !('\n' | '\r')* ('\r'? '\n')?;

terminal EOL:
	('\r' | '\n')+;

terminal HIDDEN:
	'other hidden tokens';

terminal ANY_OTHER:
	.;