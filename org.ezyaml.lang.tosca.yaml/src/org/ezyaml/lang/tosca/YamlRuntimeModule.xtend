/*
 * generated by Xtext 2.18.0
 */
package org.ezyaml.lang.tosca

import org.eclipse.xtext.conversion.IValueConverterService
import org.eclipse.xtext.scoping.IGlobalScopeProvider
import org.eclipse.xtext.scoping.impl.ImportUriGlobalScopeProvider
import org.ezyaml.lang.tosca.converters.Yaml2XtextTerminalConverters
import org.ezyaml.lang.tosca.parser.antlr.lexer.jflex.JFlexBasedEOFAwareYamlLexer

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class YamlRuntimeModule extends AbstractYamlRuntimeModule {

	override bindInternalYamlLexer() {
		return JFlexBasedEOFAwareYamlLexer;
	}

	// contributed by org.eclipse.xtext.xtext.generator.xbase.XbaseGeneratorFragment2
	override Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return ImportUriGlobalScopeProvider;
	}

	override Class<? extends IValueConverterService> bindIValueConverterService() {
		Yaml2XtextTerminalConverters
	}
/* 
	def Class<? extends AbstractFileSystemAccess2> bindAbstractFileSystemAccess2() {
		return JavaIoFileSystemAccess;
	}

	override Class<? extends XtextResource> bindXtextResource() {
		return BatchLinkableResource;
	}

	def Class<? extends ILinkingDiagnosticMessageProvider> bindILinkingDiagnosticMessageProvider() {
		return UnresolvedFeatureCallTypeAwareMessageProvider;
	}

	def Class<? extends IResourceDescription.Manager> bindIResourceDescription$Manager() {
		return DerivedStateAwareResourceDescriptionManager;
	}

	@SingletonBinding(eager=true)
	def Class<? extends JvmTypeReferencesValidator> bindJvmTypeReferencesValidator() {
		return JvmTypeReferencesValidator;
	}

	@SingletonBinding(eager=true)
	def Class<? extends UniqueClassNameValidator> bindUniqueClassNameValidator() {
		return UniqueClassNameValidator;
	}

	def Class<? extends IJavaDocTypeReferenceProvider> bindIJavaDocReferenceProvider() {
		return XbaseJavaDocTypeReferenceProvider;
	}

	def Class<? extends IGenerator> bindIGenerator() {
		return JvmModelGenerator;
	}
	def Class<? extends IJvmModelInferrer> bindIJvmModelInferrer() {
		return YamlJvmModelInferrer;
	}
*/
}
