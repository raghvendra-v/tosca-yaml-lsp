/*
 * generated by Xtext 2.16.0
 */
package org.ezyaml.lang.tosca.tests

import com.google.inject.Inject
import java.io.IOException
import java.io.OutputStream
import java.io.PrintStream
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import java.util.stream.Collectors
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.^extension.ExtendWith
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.ezyaml.lang.tosca.yaml.YamlDocument
import org.junit.jupiter.api.DisplayName
import static org.junit.jupiter.api.Assertions.*
import java.util.List
import org.junit.jupiter.params.provider.Arguments

@ExtendWith(InjectionExtension)
@InjectWith(YamlInjectorProvider)
@DisplayName("OSM catalogue Parse Test")
class OSM_BulkParserTest {
	@Inject
	ParseHelper<YamlDocument> parseHelper

	static String[] configFilePaths = #["./test-resources/devops/descriptor-packages"];

	val dummy = new PrintStream(new OutputStream() {
		override write(int b) throws IOException {
			// DO NOTHING
		}
	})
	val original = System.out

	def static List<Arguments> getFiles() {
		val List<Path> paths = newArrayList()
		configFilePaths.forEach [ configFilePath |
			paths.addAll((Files.walk(Paths.get(configFilePath)).collect(Collectors.toList())))
		]
		paths.filter[p|Files.isRegularFile(p) && ( p.toString.endsWith(".yaml") || p.toString.endsWith(".yml"))].map [ p |
			Arguments.of(p.fileName.toString, p)
		].toList
	}

	@ParameterizedTest(name="{0}")
	@MethodSource("getFiles")
	def void parseYaml(String fileName, Path p) {
		try {
			System.setOut(dummy)
			var r = parseHelper.parse(new String(Files.readAllBytes(p)))
			System.setOut(original)
			Assertions.assertNotNull(r)
			var errors = r.eResource.errors
			Assertions.assertTrue(errors.isEmpty, '''Errors while parsing «p.toString»: «errors.join("\n\t")»''')
		} catch (Throwable t) {
			System.setOut(original)
			fail('''Error while parsing «p.toString»: «t.message»''', t)

		}

	}
}
